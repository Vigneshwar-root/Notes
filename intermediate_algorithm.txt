***********************
Intermediate Algorithm
***********************

--------
Sum All Numbers in a Range
--------------------------------

For example, sumAll([4,1]) should return 10 because sum of all the numbers between 1 and 4 (both inclusive) is 10

Solution 1:
-----------
function sumAll(arr) {
  let max = arr[1] > arr[0] ? arr[1] : arr[0];
  let min = arr[1] > arr[0] ? arr[0] : arr[1];
  console.log(max);
  console.log(min);
  let val = [];
  for(let i=min;i<=max;i++){
    val.push(i);
  }
  console.log(val);
  return val.reduce((sum,ar) => sum+ar);
}

sumAll([1, 4]);
console.log(sumAll([1,4])); 

Solution 2:
----------
function sumAll(arr) {
  const [min,max] = [...arr].sort((a,b)=> a-b);
  // let max = arr[1] > arr[0] ? arr[1] : arr[0];
  // let min = arr[1] > arr[0] ? arr[0] : arr[1];
  let val = [];
  for(let i=min;i<=max;i++){
    val.push(i);
  }
  return val.reduce((sum,ar) => sum+ar);
}

sumAll([4, 1]); 

----------------------------------------------------------
--------
Diff Two Arrays
--------------------------------

Compare two arrays and return a new array with any items only found in one of the two given arrays, but not both. In other words, return the symmetric difference of the two arrays.

Note: You can return the array with its elements in any order.

Sample:
diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]) should return an array.
[1, 2, 3, 5], [1, 2, 3, 4, 5] should return [4].
["diorite", "andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"] should return ["pink wool"].

Solution 1:
-----------

function diffArray(arr1, arr2) {
  const newArr = [];
  return arr1.concat(arr2).filter(item => !arr1.includes(item) || !arr2.includes(item));
}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);

console.log(
diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]));

-------------------------------------------------------------

-------
Destroyer
----------------------
Sample:
destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3) should return [1, 5, 1]

Solution:
function destroyer(arr,...values) {
  return arr.filter(item => !values.includes(item));
}

destroyer([1, 2, 3, 1, 2, 3], 2, 3);


---------------------------------------------------------------


Sample:
whatIsInAName([{ "apple": 1 }, { "apple": 1 }, { "apple": 1, "bat": 2 }], { "apple": 1 }) should return [{ "apple": 1 }, { "apple": 1 }, { "apple": 1, "bat": 2 }].

function whatIsInAName(collection, source) {
    let objKeys = Object.keys(source);

    return collection.filter(val => objKeys.every(item => val.hasOwnProperty(item) && val[item] === source[item]));
}

whatIsInAName([{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], { last: "Capulet" });


--------------------------------------------------------------------

************
Spinal Tap Case
************

Sample:
spinalCase("The_Andy_Griffith_Show") should return the string the-andy-griffith-show.
spinalCase("Teletubbies say Eh-oh") should return the string teletubbies-say-eh-oh.

Solution:

function spinalCase(str) {
  return str.replace(/([a-z])([A-Z])/g,"$1 $2").split(/(?:_|&| )+/).join("-").toLowerCase();
}

spinalCase('This Is Spinal Tap');
console.log(spinalCase('this&Is&Spinal&Tap')); 

---------------------------------------------------------------------------------------------------------------
*********
Pig Latin
*********

Pig Latin is a way of altering English Words. The rules are as follows:

- If a word begins with a consonant, take the first consonant or consonant cluster, move it to the end of the word, and add ay to it.

- If a word begins with a vowel, just add way at the end.

------------------

Solution:

function translatePigLatin(str) {
  return str
    .replace(/^[aeiou]\w*/, "$&way")
    .replace(/(^[^aeiou]+)(\w*)/, "$2$1ay");
}

translatePigLatin("consonant");
console.log(translatePigLatin("glove"));


------------------------------------------------------------------------------------------------------------------------
******************
Search and Replace
******************

function myReplace(str, before, after) {
  console.log(str.indexOf(before));
  if (/^[A-Z]/.test(before)) {
    after = after[0].toUpperCase() + after.slice(1)
  } else {
    after = after[0].toLowerCase() + after.slice(1)
  }

  return str.replace(before,after);
}

myReplace("A quick brown fox jumped over the lazy dog", "jumped", "leaped");

--------------------------------------------------------------------------------------------------------------------------
***********
DNA Pairing
***********

function pairElement(str) {
  const pairs = { A:"T",T:"A",G:"C",C:"G"}
  return str.split("").map(x => [x, pairs[x]]);
}

pairElement("GCG");
console.log(pairElement("GCG"));

------------------------------------------------------------------------------------------------------------------------------
***************
Missing Letters
***************

function fearNotLetter(str) {
  let missingStr = ""
  let firstChar = str.split("")[0].charCodeAt();
  str.split("").map((arg)=>{
    if(arg.charCodeAt() === firstChar){
      console.log(firstChar) 
       firstChar++;
    } 
    else{
      missingStr = String.fromCharCode(firstChar)
      console.log(missingStr)
    }
  })
  return missingStr !== ""? missingStr:undefined
}

fearNotLetter("abce");


Test Cases:
fearNotLetter("abce") should return the string d.
fearNotLetter("abcdefghijklmnopqrstuvwxyz") should return undefined.

------------------------------------------------------------------------------------------------------------------------------
************
Sorted Union
************

function uniteUnique(...arr) {
  const result = [];
  arr.map(arg => {
      arg.forEach(val => {
        result.push(val)
      })
    })
    console.log(Array.from(new Set(result)))
  return Array.from(new Set(result));
}

uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);


------------------------------------------------------------------------------------------------------------------------------
*********************
Convert HTML Entities
*********************

function convertHTML(str) {
  const htmlEntities = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&apos;"
  };
  return str.split("").map( arg => htmlEntities[arg] || arg).join("");
}

convertHTML("Dolce & Gabbana");

------------------------------------------------------------------------------------------------------------------------------
*****************************
Sum All Odd Fibonacci Numbers
*****************************
function fibLogic(num){
  let prevNumber = 0;
  let currentNumber = 1;
  let result =0;
  let resultArr = [];
  while(currentNumber <= num){
      result = prevNumber +  currentNumber;
      resultArr.push(currentNumber);
      prevNumber = currentNumber;
      currentNumber = result;
  }
  return resultArr
}


function sumFibs(num) {
  let fibLogicArr = fibLogic(num)
  if(fibLogicArr.length > 0){
    let filterArr = fibLogicArr.filter(arg => arg % 2 != 0)
    return filterArr.reduce((cur,acc) => cur + acc);
  }
  else{
    return 0;
  }
  
}


console.log(sumFibs(75025))  

-----------------------------------------------------------------------------------------------------------------------------------
**************
Sum All Primes
**************
function primeNumberChecker(num){
  if(num <=1)
    return false;
  for(let i=2;i < num;i++){
    if(num % i  == 0)
      return false
  }
  return true
}


function sumPrimes(num) {
  let sumOfPrimeNumbers = 0;
  for(let i=2;i<=num;i++){
    // console.log(`the value of i is ${i}`)
    sumOfPrimeNumbers += (primeNumberChecker(i) === true) ? i : 0;
    // console.log(sumOfPrimeNumbers);
  }
    
  return sumOfPrimeNumbers;
}
sumPrimes(10);
console.log(sumPrimes(977));
// console.log(primeNumberChecker())

---------------------------------------------------------------------------------------------------------------------------------------
